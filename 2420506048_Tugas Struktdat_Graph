{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNvF5RsTVJDE+LtDeqq8v0I"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i_oNtK8s_3Ml","executionInfo":{"status":"ok","timestamp":1747445319727,"user_tz":-420,"elapsed":47,"user":{"displayName":"Muhammad Dafa Falah Labib","userId":"12141881049201244595"}},"outputId":"405b2286-cb9a-4a6a-bde7-c9fc184be9c9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Print Graph:\n","A -> B, C\n","B -> A, C, D\n","C -> A, B, E\n","D -> B, E\n","E -> C, D\n","\n","\n","BFS dari simpul A:\n","['A', 'B', 'C', 'D', 'E']\n","\n","DFS dari simpul A:\n","A B C E D \n","Path dari A ke E:\n","['A', 'B', 'C', 'E']\n","\n","Apakah graph terhubung?\n","True\n"]}],"source":["from collections import deque\n","\n","# 1. Buat graf tak berarah dengan minimal 5 simpul dan 7 sisi\n","graph = {\n","    'A': ['B', 'C'],\n","    'B': ['A', 'C', 'D'],\n","    'C': ['A', 'B', 'E'],\n","    'D': ['B', 'E'],\n","    'E': ['C', 'D']\n","}\n","\n","def print_graph(graph):\n","    for node in graph:\n","        print(f\"{node} -> {', '.join(graph[node])}\")\n","\n","# 2 & 3. Implementasi BFS dan DFS lalu modifikasi bfs\n","def bfs(graph, start):\n","    visited = set()\n","    queue = deque([start])\n","    result = []\n","    while queue:\n","        vertex = queue.popleft()\n","        if vertex not in visited:\n","            result.append(vertex)\n","            visited.add(vertex)\n","            queue.extend([n for n in graph[vertex] if n not in visited])\n","    return result\n","\n","def dfs(graph, start):\n","    visited = set()\n","    stack = [start]\n","    while stack:\n","        vertex = stack.pop()\n","        if vertex not in visited:\n","            print(vertex, end=' ')\n","            visited.add(vertex)\n","            stack.extend(reversed(graph[vertex]))\n","\n","# 4. Fungsi find_path dengan DFS\n","def find_path(graph, start, end, path=None):\n","    if path is None:\n","        path = []\n","    path = path + [start]\n","    if start == end:\n","        return path\n","    for node in graph[start]:\n","        if node not in path:\n","            newpath = find_path(graph, node, end, path)\n","            if newpath:\n","                return newpath\n","    return None\n","\n","# 5. Fungsi is_connected\n","def is_connected(graph):\n","    nodes = list(graph.keys())\n","    visited = set()\n","\n","    def dfs_recursive(node):\n","        visited.add(node)\n","        for neighbor in graph[node]:\n","            if neighbor not in visited:\n","                dfs_recursive(neighbor)\n","\n","    dfs_recursive(nodes[0])\n","    return len(visited) == len(nodes)\n","\n","# Contoh pemanggilan fungsi\n","print(\"Print Graph:\")\n","print_graph(graph)\n","\n","print(\"\\n\\nBFS dari simpul A:\")\n","print(bfs(graph, 'A'))\n","\n","print(\"\\nDFS dari simpul A:\")\n","dfs(graph, 'A')\n","\n","print(\"\\nPath dari A ke E:\")\n","print(find_path(graph, 'A', 'E'))\n","\n","print(\"\\nApakah graph terhubung?\")\n","print(is_connected(graph))\n"]}]}