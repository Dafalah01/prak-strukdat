{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOQ5Ve9eh0H1Xv94n0ivZ4p"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"diN3i0cmfI7B","executionInfo":{"status":"ok","timestamp":1742354170005,"user_tz":-420,"elapsed":9826,"user":{"displayName":"Muhammad Dafa Falah Labib","userId":"12141881049201244595"}},"outputId":"190db3e6-5eb7-4273-9527-a91f5f1dedea"},"outputs":[{"output_type":"stream","name":"stdout","text":["Daftar angka acak:\n","[366, 448, 196, 602, 904, 383, 387, 443, 270, 276, 195, 23, 159, 976, 269, 576, 532, 905, 796, 150, 452, 223, 390, 204, 146, 13, 673, 898, 395, 465, 355, 823, 683, 565, 11, 140, 983, 404, 537, 82, 411, 434, 747, 778, 798, 44, 378, 749, 622, 721, 72, 52, 322, 426, 170, 459, 441, 211, 841, 87, 783, 835, 293, 287, 525, 53, 319, 445, 549, 791, 154, 255, 801, 49, 851, 527, 158, 188, 805, 385, 769, 483, 598, 893, 502, 189, 716, 500, 173, 949, 400, 662, 758, 488, 623, 569, 915, 324, 610, 384]\n","Masukkan angka target: 13\n","Linear Search: Elemen ditemukan pada indeks 25 setelah 26 perbandingan.\n","Binary Search: Elemen ditemukan pada indeks 1 setelah 7 perbandingan.\n","Jump Search: Elemen ditemukan pada indeks 1 setelah 2 perbandingan.\n"]}],"source":["import random as rd\n","import math\n","\n","arr = rd.sample(range(1, 1001), 100)\n","print(\"Daftar angka acak:\")\n","print(arr)\n","\n","target = int(input(\"Masukkan angka target: \"))\n","\n","def linear_search(arr, target):\n","    counter = 0\n","    for i in range(len(arr)):\n","        counter += 1\n","        if arr[i] == target:\n","            return i, counter\n","    return -1, counter\n","\n","def binary_search(arr, target):\n","    arr.sort()\n","    counter = 0\n","    low = 0\n","    high = len(arr) - 1\n","\n","    while low <= high:\n","        counter += 1\n","        mid = (low + high) // 2\n","        if arr[mid] == target:\n","            return mid, counter\n","        elif arr[mid] < target:\n","            low = mid + 1\n","        else:\n","            high = mid - 1\n","    return -1, counter\n","\n","def jump_search(arr, target):\n","    arr.sort()\n","    counter = 0\n","    n = len(arr)\n","    step = int(math.sqrt(n))\n","    prev = 0\n","\n","    while arr[min(step, n) - 1] < target:\n","        counter += 1\n","        prev = step\n","        step += int(math.sqrt(n))\n","        if prev >= n:\n","            return -1, counter\n","\n","    for i in range(prev, min(step, n)):\n","        counter += 1\n","        if arr[i] == target:\n","            return i, counter\n","    return -1, counter\n","\n","def search_and_print(search_func, name):\n","    result, counter = search_func(arr, target)\n","    if result != -1:\n","        print(f\"{name}: Elemen ditemukan pada indeks {result} setelah {counter} perbandingan.\")\n","    else:\n","        print(f\"{name}: Elemen tidak ditemukan setelah {counter} perbandingan.\")\n","\n","search_and_print(linear_search, \"Linear Search\")\n","search_and_print(binary_search, \"Binary Search\")\n","search_and_print(jump_search, \"Jump Search\")"]}]}